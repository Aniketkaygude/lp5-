import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt
from sklearn import metrics

# Load MNIST dataset of handwritten digits
(x_train, y_train), (x_test, y_test) = mnist.load_data()


# Display the first training image
plt.imshow(x_train[1], cmap='gray')
plt.show()

# Print pixel values of the first image
print(x_train[0])

# Display shapes of training and testing datasets
print("X_train shape", x_train.shape)
print("y_train shape", y_train.shape)
print("X_test shape", x_test.shape)
print("y_test shape", y_test.shape)

# Flatten 28x28 images into 784-dimensional vectors
x_train = x_train.reshape(60000, 784)
x_test = x_test.reshape(10000, 784)

# Convert pixel values to float32 and normalize to [0, 1]
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255

# Convert class labels to one-hot encoded vectors
num_classes = 10
y_train = np.eye(num_classes)[y_train]
y_test = np.eye(num_classes)[y_test]

# Build a neural network with two hidden layers and dropout
model = Sequential()
model.add(Dense(512, activation='relu', input_shape=(784,)))
model.add(Dropout(0.2))
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(num_classes, activation='softmax'))

# Compile the model with loss, optimizer, and metric
model.compile(loss='categorical_crossentropy',
              optimizer=RMSprop(),
              metrics=['accuracy'])

# Train the model with specified batch size and epochs
batch_size = 128
epochs = 20
history = model.fit(x_train, y_train,
                    batch_size=batch_size,
                    epochs=epochs,
                    verbose=1,
                    validation_data=(x_test, y_test))

# Evaluate the trained model on test data
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

model.save('mnist_model.keras')



from tensorflow.keras.models import load_model

# Load the trained model in the new Keras format
model = load_model('mnist_model.keras')
model

#custom input checking, draw 7 in and save in the same dir as file name as "7img.png"

import cv2
import numpy as np
from tensorflow.keras.models import load_model
import matplotlib.pyplot as plt

def predict_handwritten_digit(image_path):
    # Load the image (ensure it's 28x28 and grayscale)
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Check if the image is loaded properly
    if img is None:
        print(f"Failed to load image at {image_path}")
        return

    # Resize image to 28x28 pixels
    img_resized = cv2.resize(img, (28, 28))

    # Invert colors if needed (MNIST images are black on white)
    img_resized = cv2.bitwise_not(img_resized)

    # Normalize and reshape the image
    img_resized = img_resized.astype('float32') / 255
    img_resized = img_resized.reshape(1, 784)  # Flatten the image

    # Debugging: Show the processed image before prediction
    plt.imshow(img_resized.reshape(28, 28), cmap='gray')
    plt.title("Processed Image")
    plt.show()

    # Load the trained model
    model = load_model('mnist_model.keras')

    # Make the prediction
    prediction = model.predict(img_resized)

    # Get the predicted digit (the class with the highest probability)
    predicted_digit = np.argmax(prediction)
    print(f'Predicted digit: {predicted_digit}')

# Example usage: Replace '9img.png' with the path to your own handwritten digit image
path = r"7img.png"
predict_handwritten_digit(path)


